
Olimex_P207.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d1c  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001ea0  08001ea0  00011ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001eb0  08001eb0  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001eb0  08001eb0  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001eb0  08001eb0  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001eb0  08001eb0  00011eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001eb4  08001eb4  00011eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  08001eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d5d4  20000008  08001ec0  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d5dc  08001ec0  0002d5dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005826  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000013d6  00000000  00000000  0002589a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000590  00000000  00000000  00026c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000413  00000000  00000000  00027200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a125  00000000  00000000  00027613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005531  00000000  00000000  00041738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090e92  00000000  00000000  00046c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000158c  00000000  00000000  000d7afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000d9088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000008 	.word	0x20000008
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08001e88 	.word	0x08001e88

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000000c 	.word	0x2000000c
 80001c0:	08001e88 	.word	0x08001e88

080001c4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001d0:	4907      	ldr	r1, [pc, #28]	; (80001f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	4313      	orrs	r3, r2
 80001d6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80001d8:	4b05      	ldr	r3, [pc, #20]	; (80001f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80001da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	4013      	ands	r3, r2
 80001e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e2:	68fb      	ldr	r3, [r7, #12]
}
 80001e4:	bf00      	nop
 80001e6:	3714      	adds	r7, #20
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bc80      	pop	{r7}
 80001ec:	4770      	bx	lr
 80001ee:	bf00      	nop
 80001f0:	40023800 	.word	0x40023800

080001f4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001f4:	b480      	push	{r7}
 80001f6:	b083      	sub	sp, #12
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	683a      	ldr	r2, [r7, #0]
 8000202:	619a      	str	r2, [r3, #24]
}
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr

0800020e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800020e:	b480      	push	{r7}
 8000210:	b083      	sub	sp, #12
 8000212:	af00      	add	r7, sp, #0
 8000214:	6078      	str	r0, [r7, #4]
 8000216:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	041a      	lsls	r2, r3, #16
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	619a      	str	r2, [r3, #24]
}
 8000220:	bf00      	nop
 8000222:	370c      	adds	r7, #12
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
	...

0800022c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b086      	sub	sp, #24
 8000230:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000232:	463b      	mov	r3, r7
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
 800023e:	611a      	str	r2, [r3, #16]
 8000240:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000242:	2020      	movs	r0, #32
 8000244:	f7ff ffbe 	bl	80001c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000248:	2004      	movs	r0, #4
 800024a:	f7ff ffbb 	bl	80001c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800024e:	2001      	movs	r0, #1
 8000250:	f7ff ffb8 	bl	80001c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000254:	2002      	movs	r0, #2
 8000256:	f7ff ffb5 	bl	80001c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800025a:	2008      	movs	r0, #8
 800025c:	f7ff ffb2 	bl	80001c4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_STAT_1_GPIO_Port, LED_STAT_1_Pin);
 8000260:	2140      	movs	r1, #64	; 0x40
 8000262:	4840      	ldr	r0, [pc, #256]	; (8000364 <MX_GPIO_Init+0x138>)
 8000264:	f7ff ffd3 	bl	800020e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LED_STAT_2_GPIO_Port, LED_STAT_2_Pin);
 8000268:	2180      	movs	r1, #128	; 0x80
 800026a:	483e      	ldr	r0, [pc, #248]	; (8000364 <MX_GPIO_Init+0x138>)
 800026c:	f7ff ffcf 	bl	800020e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SOFT_SPI_MOSI_GPIO_Port, SOFT_SPI_MOSI_Pin);
 8000270:	2108      	movs	r1, #8
 8000272:	483d      	ldr	r0, [pc, #244]	; (8000368 <MX_GPIO_Init+0x13c>)
 8000274:	f7ff ffcb 	bl	800020e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SPI_SCK_GPIO_Port, SPI_SCK_Pin);
 8000278:	2120      	movs	r1, #32
 800027a:	483c      	ldr	r0, [pc, #240]	; (800036c <MX_GPIO_Init+0x140>)
 800027c:	f7ff ffc7 	bl	800020e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(LCD_RST_GPIO_Port, LCD_RST_Pin);
 8000280:	2108      	movs	r1, #8
 8000282:	483b      	ldr	r0, [pc, #236]	; (8000370 <MX_GPIO_Init+0x144>)
 8000284:	f7ff ffc3 	bl	800020e <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_SetOutputPin(LCD_CS_GPIO_Port, LCD_CS_Pin);
 8000288:	2140      	movs	r1, #64	; 0x40
 800028a:	4839      	ldr	r0, [pc, #228]	; (8000370 <MX_GPIO_Init+0x144>)
 800028c:	f7ff ffb2 	bl	80001f4 <LL_GPIO_SetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_STAT_1_Pin;
 8000290:	2340      	movs	r3, #64	; 0x40
 8000292:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000294:	2301      	movs	r3, #1
 8000296:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000298:	2300      	movs	r3, #0
 800029a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800029c:	2300      	movs	r3, #0
 800029e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80002a0:	2300      	movs	r3, #0
 80002a2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_STAT_1_GPIO_Port, &GPIO_InitStruct);
 80002a4:	463b      	mov	r3, r7
 80002a6:	4619      	mov	r1, r3
 80002a8:	482e      	ldr	r0, [pc, #184]	; (8000364 <MX_GPIO_Init+0x138>)
 80002aa:	f001 fa31 	bl	8001710 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LED_STAT_2_Pin;
 80002ae:	2380      	movs	r3, #128	; 0x80
 80002b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002b2:	2301      	movs	r3, #1
 80002b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80002b6:	2300      	movs	r3, #0
 80002b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80002ba:	2300      	movs	r3, #0
 80002bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80002be:	2300      	movs	r3, #0
 80002c0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LED_STAT_2_GPIO_Port, &GPIO_InitStruct);
 80002c2:	463b      	mov	r3, r7
 80002c4:	4619      	mov	r1, r3
 80002c6:	4827      	ldr	r0, [pc, #156]	; (8000364 <MX_GPIO_Init+0x138>)
 80002c8:	f001 fa22 	bl	8001710 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SOFT_SPI_MOSI_Pin;
 80002cc:	2308      	movs	r3, #8
 80002ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002d0:	2301      	movs	r3, #1
 80002d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80002d4:	2300      	movs	r3, #0
 80002d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80002d8:	2300      	movs	r3, #0
 80002da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80002dc:	2300      	movs	r3, #0
 80002de:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SOFT_SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 80002e0:	463b      	mov	r3, r7
 80002e2:	4619      	mov	r1, r3
 80002e4:	4820      	ldr	r0, [pc, #128]	; (8000368 <MX_GPIO_Init+0x13c>)
 80002e6:	f001 fa13 	bl	8001710 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_SCK_Pin;
 80002ea:	2320      	movs	r3, #32
 80002ec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80002ee:	2301      	movs	r3, #1
 80002f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80002fa:	2300      	movs	r3, #0
 80002fc:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 80002fe:	463b      	mov	r3, r7
 8000300:	4619      	mov	r1, r3
 8000302:	481a      	ldr	r0, [pc, #104]	; (800036c <MX_GPIO_Init+0x140>)
 8000304:	f001 fa04 	bl	8001710 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 8000308:	2308      	movs	r3, #8
 800030a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800030c:	2301      	movs	r3, #1
 800030e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000310:	2300      	movs	r3, #0
 8000312:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000318:	2300      	movs	r3, #0
 800031a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800031c:	463b      	mov	r3, r7
 800031e:	4619      	mov	r1, r3
 8000320:	4813      	ldr	r0, [pc, #76]	; (8000370 <MX_GPIO_Init+0x144>)
 8000322:	f001 f9f5 	bl	8001710 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000326:	2340      	movs	r3, #64	; 0x40
 8000328:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800032a:	2301      	movs	r3, #1
 800032c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800032e:	2300      	movs	r3, #0
 8000330:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000336:	2300      	movs	r3, #0
 8000338:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 800033a:	463b      	mov	r3, r7
 800033c:	4619      	mov	r1, r3
 800033e:	480c      	ldr	r0, [pc, #48]	; (8000370 <MX_GPIO_Init+0x144>)
 8000340:	f001 f9e6 	bl	8001710 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8000344:	2310      	movs	r3, #16
 8000346:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000348:	2300      	movs	r3, #0
 800034a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800034c:	2301      	movs	r3, #1
 800034e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8000350:	463b      	mov	r3, r7
 8000352:	4619      	mov	r1, r3
 8000354:	4807      	ldr	r0, [pc, #28]	; (8000374 <MX_GPIO_Init+0x148>)
 8000356:	f001 f9db 	bl	8001710 <LL_GPIO_Init>

}
 800035a:	bf00      	nop
 800035c:	3718      	adds	r7, #24
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	bf00      	nop
 8000364:	40021400 	.word	0x40021400
 8000368:	40020800 	.word	0x40020800
 800036c:	40020000 	.word	0x40020000
 8000370:	40020c00 	.word	0x40020c00
 8000374:	40020400 	.word	0x40020400

08000378 <lcd_delay>:
	LCD_CS_ON();
	transfer_data_block(buf, L_DATA, size);
	LCD_CS_OFF();
}

void lcd_delay(uint16_t t_ms){
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	80fb      	strh	r3, [r7, #6]
	uint16_t time = ms_ticks + t_ms;
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <lcd_delay+0x30>)
 8000384:	881b      	ldrh	r3, [r3, #0]
 8000386:	b29a      	uxth	r2, r3
 8000388:	88fb      	ldrh	r3, [r7, #6]
 800038a:	4413      	add	r3, r2
 800038c:	81fb      	strh	r3, [r7, #14]

	while(time > ms_ticks);
 800038e:	bf00      	nop
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <lcd_delay+0x30>)
 8000392:	881b      	ldrh	r3, [r3, #0]
 8000394:	b29b      	uxth	r3, r3
 8000396:	89fa      	ldrh	r2, [r7, #14]
 8000398:	429a      	cmp	r2, r3
 800039a:	d8f9      	bhi.n	8000390 <lcd_delay+0x18>
}
 800039c:	bf00      	nop
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	2000d5d8 	.word	0x2000d5d8

080003ac <lcd_reset>:

void lcd_reset(void){
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
	LCD_RST_RESET();
 80003b0:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <lcd_reset+0x24>)
 80003b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80003b6:	619a      	str	r2, [r3, #24]
	lcd_delay(1);
 80003b8:	2001      	movs	r0, #1
 80003ba:	f7ff ffdd 	bl	8000378 <lcd_delay>
	LCD_RST_SET();
 80003be:	4b04      	ldr	r3, [pc, #16]	; (80003d0 <lcd_reset+0x24>)
 80003c0:	2208      	movs	r2, #8
 80003c2:	619a      	str	r2, [r3, #24]
	lcd_delay(5);
 80003c4:	2005      	movs	r0, #5
 80003c6:	f7ff ffd7 	bl	8000378 <lcd_delay>
}
 80003ca:	bf00      	nop
 80003cc:	bd80      	pop	{r7, pc}
 80003ce:	bf00      	nop
 80003d0:	40020c00 	.word	0x40020c00

080003d4 <lcd_init>:

void lcd_init(void){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af02      	add	r7, sp, #8
	LCD_CS_OFF();
 80003da:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <lcd_init+0xbc>)
 80003dc:	2240      	movs	r2, #64	; 0x40
 80003de:	619a      	str	r2, [r3, #24]
	SPI_MOSI_RESET();
 80003e0:	4b2c      	ldr	r3, [pc, #176]	; (8000494 <lcd_init+0xc0>)
 80003e2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80003e6:	619a      	str	r2, [r3, #24]
	SPI_SCK_RESET();
 80003e8:	4b2b      	ldr	r3, [pc, #172]	; (8000498 <lcd_init+0xc4>)
 80003ea:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80003ee:	619a      	str	r2, [r3, #24]
	lcd_reset();
 80003f0:	f7ff ffdc 	bl	80003ac <lcd_reset>

	__SPI_SEND_CMD(LCD_CMD_SLEEP_OUT);
 80003f4:	2300      	movs	r3, #0
 80003f6:	9301      	str	r3, [sp, #4]
 80003f8:	2301      	movs	r3, #1
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	2300      	movs	r3, #0
 80003fe:	2200      	movs	r2, #0
 8000400:	2100      	movs	r1, #0
 8000402:	2011      	movs	r0, #17
 8000404:	f000 fc66 	bl	8000cd4 <spi_add_to_queue>
	__SPI_SEND_CMD(LCD_CMD_INVON);
 8000408:	2300      	movs	r3, #0
 800040a:	9301      	str	r3, [sp, #4]
 800040c:	2301      	movs	r3, #1
 800040e:	9300      	str	r3, [sp, #0]
 8000410:	2300      	movs	r3, #0
 8000412:	2200      	movs	r2, #0
 8000414:	2100      	movs	r1, #0
 8000416:	2021      	movs	r0, #33	; 0x21
 8000418:	f000 fc5c 	bl	8000cd4 <spi_add_to_queue>
	__SPI_SEND_SETT_LEN_2(LCD_CMD_COLMOD, 0x03);
 800041c:	2300      	movs	r3, #0
 800041e:	9301      	str	r3, [sp, #4]
 8000420:	2302      	movs	r3, #2
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	2300      	movs	r3, #0
 8000426:	2200      	movs	r2, #0
 8000428:	2103      	movs	r1, #3
 800042a:	203a      	movs	r0, #58	; 0x3a
 800042c:	f000 fc52 	bl	8000cd4 <spi_add_to_queue>
	__SPI_SEND_SETT_LEN_2(LCD_CMD_MADCTL, 0x08);
 8000430:	2300      	movs	r3, #0
 8000432:	9301      	str	r3, [sp, #4]
 8000434:	2302      	movs	r3, #2
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	2300      	movs	r3, #0
 800043a:	2200      	movs	r2, #0
 800043c:	2108      	movs	r1, #8
 800043e:	2036      	movs	r0, #54	; 0x36
 8000440:	f000 fc48 	bl	8000cd4 <spi_add_to_queue>
	__SPI_SEND_SETT_LEN_2(LCD_CMD_SETCON, 0x30);
 8000444:	2300      	movs	r3, #0
 8000446:	9301      	str	r3, [sp, #4]
 8000448:	2302      	movs	r3, #2
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	2300      	movs	r3, #0
 800044e:	2200      	movs	r2, #0
 8000450:	2130      	movs	r1, #48	; 0x30
 8000452:	2025      	movs	r0, #37	; 0x25
 8000454:	f000 fc3e 	bl	8000cd4 <spi_add_to_queue>
	__SPI_SEND_CMD(LCD_CMD_DISPON);
 8000458:	2300      	movs	r3, #0
 800045a:	9301      	str	r3, [sp, #4]
 800045c:	2301      	movs	r3, #1
 800045e:	9300      	str	r3, [sp, #0]
 8000460:	2300      	movs	r3, #0
 8000462:	2200      	movs	r2, #0
 8000464:	2100      	movs	r1, #0
 8000466:	2029      	movs	r0, #41	; 0x29
 8000468:	f000 fc34 	bl	8000cd4 <spi_add_to_queue>

	control_lcd.S.coordinates.cmd_СASET = LCD_CMD_CASET;
 800046c:	4b0b      	ldr	r3, [pc, #44]	; (800049c <lcd_init+0xc8>)
 800046e:	222a      	movs	r2, #42	; 0x2a
 8000470:	801a      	strh	r2, [r3, #0]
	control_lcd.S.coordinates.cmd_PASET = LCD_CMD_PASET;
 8000472:	4b0a      	ldr	r3, [pc, #40]	; (800049c <lcd_init+0xc8>)
 8000474:	222b      	movs	r2, #43	; 0x2b
 8000476:	80da      	strh	r2, [r3, #6]

	control_lcd.S.pixels.cmd_NOP = LCD_CMD_NOP;
 8000478:	4b08      	ldr	r3, [pc, #32]	; (800049c <lcd_init+0xc8>)
 800047a:	f503 4340 	add.w	r3, r3, #49152	; 0xc000
 800047e:	2200      	movs	r2, #0
 8000480:	f8a3 2c3e 	strh.w	r2, [r3, #3134]	; 0xc3e
	control_lcd.S.pixels.cmd_RAMWR = LCD_CMD_RAMWR;
 8000484:	4b05      	ldr	r3, [pc, #20]	; (800049c <lcd_init+0xc8>)
 8000486:	222c      	movs	r2, #44	; 0x2c
 8000488:	819a      	strh	r2, [r3, #12]
}
 800048a:	bf00      	nop
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	40020c00 	.word	0x40020c00
 8000494:	40020800 	.word	0x40020800
 8000498:	40020000 	.word	0x40020000
 800049c:	20000024 	.word	0x20000024

080004a0 <LCD_set_x_y>:

void LCD_set_x_y(uint8_t x_start, uint8_t x_end, uint8_t y_start, uint8_t y_end){
 80004a0:	b590      	push	{r4, r7, lr}
 80004a2:	b085      	sub	sp, #20
 80004a4:	af02      	add	r7, sp, #8
 80004a6:	4604      	mov	r4, r0
 80004a8:	4608      	mov	r0, r1
 80004aa:	4611      	mov	r1, r2
 80004ac:	461a      	mov	r2, r3
 80004ae:	4623      	mov	r3, r4
 80004b0:	71fb      	strb	r3, [r7, #7]
 80004b2:	4603      	mov	r3, r0
 80004b4:	71bb      	strb	r3, [r7, #6]
 80004b6:	460b      	mov	r3, r1
 80004b8:	717b      	strb	r3, [r7, #5]
 80004ba:	4613      	mov	r3, r2
 80004bc:	713b      	strb	r3, [r7, #4]

	__SPI_SEND_SETT_LEN_3(LCD_CMD_PASET, x_start, x_end);
 80004be:	79ba      	ldrb	r2, [r7, #6]
 80004c0:	79f9      	ldrb	r1, [r7, #7]
 80004c2:	2300      	movs	r3, #0
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2303      	movs	r3, #3
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	2300      	movs	r3, #0
 80004cc:	202b      	movs	r0, #43	; 0x2b
 80004ce:	f000 fc01 	bl	8000cd4 <spi_add_to_queue>
	__SPI_SEND_SETT_LEN_3(LCD_CMD_CASET, y_start, y_end);
 80004d2:	793a      	ldrb	r2, [r7, #4]
 80004d4:	7979      	ldrb	r1, [r7, #5]
 80004d6:	2300      	movs	r3, #0
 80004d8:	9301      	str	r3, [sp, #4]
 80004da:	2303      	movs	r3, #3
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2300      	movs	r3, #0
 80004e0:	202a      	movs	r0, #42	; 0x2a
 80004e2:	f000 fbf7 	bl	8000cd4 <spi_add_to_queue>

}
 80004e6:	bf00      	nop
 80004e8:	370c      	adds	r7, #12
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd90      	pop	{r4, r7, pc}
	...

080004f0 <LCD_clear>:
		send_data_to_lcd(color_buf, 3);
	}
	send_cmd_to_lcd(LCD_CMD_NOP);
}
*/
void LCD_clear(enum LCD_12_COLOR color){
 80004f0:	b480      	push	{r7}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4603      	mov	r3, r0
 80004f8:	80fb      	strh	r3, [r7, #6]
	uint16_t step = 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	81fb      	strh	r3, [r7, #14]

	control_lcd.S.coordinates.x_start 	= (0 | 0x0100);
 80004fe:	4b30      	ldr	r3, [pc, #192]	; (80005c0 <LCD_clear+0xd0>)
 8000500:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000504:	805a      	strh	r2, [r3, #2]
	control_lcd.S.coordinates.x_end 	= (131 | 0x0100);
 8000506:	4b2e      	ldr	r3, [pc, #184]	; (80005c0 <LCD_clear+0xd0>)
 8000508:	f240 1283 	movw	r2, #387	; 0x183
 800050c:	809a      	strh	r2, [r3, #4]
	control_lcd.S.coordinates.y_start 	= (0 | 0x0100);
 800050e:	4b2c      	ldr	r3, [pc, #176]	; (80005c0 <LCD_clear+0xd0>)
 8000510:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000514:	811a      	strh	r2, [r3, #8]
	control_lcd.S.coordinates.y_end 	= (131 | 0x0100);
 8000516:	4b2a      	ldr	r3, [pc, #168]	; (80005c0 <LCD_clear+0xd0>)
 8000518:	f240 1283 	movw	r2, #387	; 0x183
 800051c:	815a      	strh	r2, [r3, #10]

	for (uint16_t i = 0; i < 8712; i++){
 800051e:	2300      	movs	r3, #0
 8000520:	81bb      	strh	r3, [r7, #12]
 8000522:	e040      	b.n	80005a6 <LCD_clear+0xb6>
		control_lcd.S.pixels.buf[0 + step] = (((color >> 4)&0xFF) | 0x0100);
 8000524:	88fb      	ldrh	r3, [r7, #6]
 8000526:	091b      	lsrs	r3, r3, #4
 8000528:	b29b      	uxth	r3, r3
 800052a:	b21b      	sxth	r3, r3
 800052c:	b2db      	uxtb	r3, r3
 800052e:	b21b      	sxth	r3, r3
 8000530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000534:	b21a      	sxth	r2, r3
 8000536:	89fb      	ldrh	r3, [r7, #14]
 8000538:	b291      	uxth	r1, r2
 800053a:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <LCD_clear+0xd0>)
 800053c:	3304      	adds	r3, #4
 800053e:	005b      	lsls	r3, r3, #1
 8000540:	4413      	add	r3, r2
 8000542:	460a      	mov	r2, r1
 8000544:	80da      	strh	r2, [r3, #6]
		control_lcd.S.pixels.buf[1 + step] = ((((color&0xF) << 4) | ((color >> 8)&0xF)) | 0x0100);
 8000546:	88fb      	ldrh	r3, [r7, #6]
 8000548:	011b      	lsls	r3, r3, #4
 800054a:	b21b      	sxth	r3, r3
 800054c:	b2db      	uxtb	r3, r3
 800054e:	b21a      	sxth	r2, r3
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	0a1b      	lsrs	r3, r3, #8
 8000554:	b29b      	uxth	r3, r3
 8000556:	b21b      	sxth	r3, r3
 8000558:	f003 030f 	and.w	r3, r3, #15
 800055c:	b21b      	sxth	r3, r3
 800055e:	4313      	orrs	r3, r2
 8000560:	b21b      	sxth	r3, r3
 8000562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000566:	b21a      	sxth	r2, r3
 8000568:	89fb      	ldrh	r3, [r7, #14]
 800056a:	3301      	adds	r3, #1
 800056c:	b291      	uxth	r1, r2
 800056e:	4a14      	ldr	r2, [pc, #80]	; (80005c0 <LCD_clear+0xd0>)
 8000570:	3304      	adds	r3, #4
 8000572:	005b      	lsls	r3, r3, #1
 8000574:	4413      	add	r3, r2
 8000576:	460a      	mov	r2, r1
 8000578:	80da      	strh	r2, [r3, #6]
		control_lcd.S.pixels.buf[2 + step] = ((color&0xFF) | 0x0100);
 800057a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	b21b      	sxth	r3, r3
 8000582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000586:	b21a      	sxth	r2, r3
 8000588:	89fb      	ldrh	r3, [r7, #14]
 800058a:	3302      	adds	r3, #2
 800058c:	b291      	uxth	r1, r2
 800058e:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <LCD_clear+0xd0>)
 8000590:	3304      	adds	r3, #4
 8000592:	005b      	lsls	r3, r3, #1
 8000594:	4413      	add	r3, r2
 8000596:	460a      	mov	r2, r1
 8000598:	80da      	strh	r2, [r3, #6]

		step = step + 3;
 800059a:	89fb      	ldrh	r3, [r7, #14]
 800059c:	3303      	adds	r3, #3
 800059e:	81fb      	strh	r3, [r7, #14]
	for (uint16_t i = 0; i < 8712; i++){
 80005a0:	89bb      	ldrh	r3, [r7, #12]
 80005a2:	3301      	adds	r3, #1
 80005a4:	81bb      	strh	r3, [r7, #12]
 80005a6:	89bb      	ldrh	r3, [r7, #12]
 80005a8:	f242 2207 	movw	r2, #8711	; 0x2207
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d9b9      	bls.n	8000524 <LCD_clear+0x34>
	}
	spi_control_mod_request = 1;
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <LCD_clear+0xd4>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	20000024 	.word	0x20000024
 80005c4:	2000cc71 	.word	0x2000cc71

080005c8 <LCD_set_pixel>:

void LCD_set_pixel(uint8_t x, uint8_t y, enum LCD_12_COLOR color){
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af02      	add	r7, sp, #8
 80005ce:	4603      	mov	r3, r0
 80005d0:	71fb      	strb	r3, [r7, #7]
 80005d2:	460b      	mov	r3, r1
 80005d4:	71bb      	strb	r3, [r7, #6]
 80005d6:	4613      	mov	r3, r2
 80005d8:	80bb      	strh	r3, [r7, #4]
	LCD_set_x_y(x, x, y, y);
 80005da:	79bb      	ldrb	r3, [r7, #6]
 80005dc:	79ba      	ldrb	r2, [r7, #6]
 80005de:	79f9      	ldrb	r1, [r7, #7]
 80005e0:	79f8      	ldrb	r0, [r7, #7]
 80005e2:	f7ff ff5d 	bl	80004a0 <LCD_set_x_y>

	__SPI_SEND_PIXEL(LCD_CMD_RAMWR, (uint8_t)(color >> 4), (uint8_t)(color << 8), LCD_CMD_NOP);
 80005e6:	88bb      	ldrh	r3, [r7, #4]
 80005e8:	091b      	lsrs	r3, r3, #4
 80005ea:	b29b      	uxth	r3, r3
 80005ec:	b2d9      	uxtb	r1, r3
 80005ee:	2301      	movs	r3, #1
 80005f0:	9301      	str	r3, [sp, #4]
 80005f2:	2304      	movs	r3, #4
 80005f4:	9300      	str	r3, [sp, #0]
 80005f6:	2300      	movs	r3, #0
 80005f8:	2200      	movs	r2, #0
 80005fa:	202c      	movs	r0, #44	; 0x2c
 80005fc:	f000 fb6a 	bl	8000cd4 <spi_add_to_queue>
}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	bc80      	pop	{r7}
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <__NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	6039      	str	r1, [r7, #0]
 8000676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	2b00      	cmp	r3, #0
 800067e:	db0a      	blt.n	8000696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000680:	683b      	ldr	r3, [r7, #0]
 8000682:	b2da      	uxtb	r2, r3
 8000684:	490c      	ldr	r1, [pc, #48]	; (80006b8 <__NVIC_SetPriority+0x4c>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	0112      	lsls	r2, r2, #4
 800068c:	b2d2      	uxtb	r2, r2
 800068e:	440b      	add	r3, r1
 8000690:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000694:	e00a      	b.n	80006ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4908      	ldr	r1, [pc, #32]	; (80006bc <__NVIC_SetPriority+0x50>)
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	f003 030f 	and.w	r3, r3, #15
 80006a2:	3b04      	subs	r3, #4
 80006a4:	0112      	lsls	r2, r2, #4
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	440b      	add	r3, r1
 80006aa:	761a      	strb	r2, [r3, #24]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bc80      	pop	{r7}
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	e000e100 	.word	0xe000e100
 80006bc:	e000ed00 	.word	0xe000ed00

080006c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006c0:	b480      	push	{r7}
 80006c2:	b089      	sub	sp, #36	; 0x24
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	60f8      	str	r0, [r7, #12]
 80006c8:	60b9      	str	r1, [r7, #8]
 80006ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006d4:	69fb      	ldr	r3, [r7, #28]
 80006d6:	f1c3 0307 	rsb	r3, r3, #7
 80006da:	2b04      	cmp	r3, #4
 80006dc:	bf28      	it	cs
 80006de:	2304      	movcs	r3, #4
 80006e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	3304      	adds	r3, #4
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	d902      	bls.n	80006f0 <NVIC_EncodePriority+0x30>
 80006ea:	69fb      	ldr	r3, [r7, #28]
 80006ec:	3b03      	subs	r3, #3
 80006ee:	e000      	b.n	80006f2 <NVIC_EncodePriority+0x32>
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f4:	f04f 32ff 	mov.w	r2, #4294967295
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	fa02 f303 	lsl.w	r3, r2, r3
 80006fe:	43da      	mvns	r2, r3
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	401a      	ands	r2, r3
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000708:	f04f 31ff 	mov.w	r1, #4294967295
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	fa01 f303 	lsl.w	r3, r1, r3
 8000712:	43d9      	mvns	r1, r3
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	4313      	orrs	r3, r2
         );
}
 800071a:	4618      	mov	r0, r3
 800071c:	3724      	adds	r7, #36	; 0x24
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr

08000724 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000734:	d301      	bcc.n	800073a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000736:	2301      	movs	r3, #1
 8000738:	e00f      	b.n	800075a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800073a:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <SysTick_Config+0x40>)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000742:	210f      	movs	r1, #15
 8000744:	f04f 30ff 	mov.w	r0, #4294967295
 8000748:	f7ff ff90 	bl	800066c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <SysTick_Config+0x40>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000752:	4b04      	ldr	r3, [pc, #16]	; (8000764 <SysTick_Config+0x40>)
 8000754:	2207      	movs	r2, #7
 8000756:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	e000e010 	.word	0xe000e010

08000768 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <LL_RCC_HSI_Enable+0x18>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a03      	ldr	r2, [pc, #12]	; (8000780 <LL_RCC_HSI_Enable+0x18>)
 8000772:	f043 0301 	orr.w	r3, r3, #1
 8000776:	6013      	str	r3, [r2, #0]
}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bc80      	pop	{r7}
 800077e:	4770      	bx	lr
 8000780:	40023800 	.word	0x40023800

08000784 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <LL_RCC_HSI_IsReady+0x20>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f003 0302 	and.w	r3, r3, #2
 8000790:	2b02      	cmp	r3, #2
 8000792:	bf0c      	ite	eq
 8000794:	2301      	moveq	r3, #1
 8000796:	2300      	movne	r3, #0
 8000798:	b2db      	uxtb	r3, r3
}
 800079a:	4618      	mov	r0, r3
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	00db      	lsls	r3, r3, #3
 80007bc:	4903      	ldr	r1, [pc, #12]	; (80007cc <LL_RCC_HSI_SetCalibTrimming+0x24>)
 80007be:	4313      	orrs	r3, r2
 80007c0:	600b      	str	r3, [r1, #0]
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	40023800 	.word	0x40023800

080007d0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <LL_RCC_SetSysClkSource+0x24>)
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f023 0203 	bic.w	r2, r3, #3
 80007e0:	4904      	ldr	r1, [pc, #16]	; (80007f4 <LL_RCC_SetSysClkSource+0x24>)
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	608b      	str	r3, [r1, #8]
}
 80007e8:	bf00      	nop
 80007ea:	370c      	adds	r7, #12
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40023800 	.word	0x40023800

080007f8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80007fc:	4b03      	ldr	r3, [pc, #12]	; (800080c <LL_RCC_GetSysClkSource+0x14>)
 80007fe:	689b      	ldr	r3, [r3, #8]
 8000800:	f003 030c 	and.w	r3, r3, #12
}
 8000804:	4618      	mov	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	40023800 	.word	0x40023800

08000810 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000818:	4b06      	ldr	r3, [pc, #24]	; (8000834 <LL_RCC_SetAHBPrescaler+0x24>)
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000820:	4904      	ldr	r1, [pc, #16]	; (8000834 <LL_RCC_SetAHBPrescaler+0x24>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4313      	orrs	r3, r2
 8000826:	608b      	str	r3, [r1, #8]
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	bc80      	pop	{r7}
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000842:	689b      	ldr	r3, [r3, #8]
 8000844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000848:	4904      	ldr	r1, [pc, #16]	; (800085c <LL_RCC_SetAPB1Prescaler+0x24>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4313      	orrs	r3, r2
 800084e:	608b      	str	r3, [r1, #8]
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800

08000860 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <LL_RCC_SetAPB2Prescaler+0x24>)
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000870:	4904      	ldr	r1, [pc, #16]	; (8000884 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4313      	orrs	r3, r2
 8000876:	608b      	str	r3, [r1, #8]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800088c:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <LL_RCC_PLL_Enable+0x18>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <LL_RCC_PLL_Enable+0x18>)
 8000892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000896:	6013      	str	r3, [r2, #0]
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	bc80      	pop	{r7}
 800089e:	4770      	bx	lr
 80008a0:	40023800 	.word	0x40023800

080008a4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <LL_RCC_PLL_IsReady+0x20>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80008b4:	bf0c      	ite	eq
 80008b6:	2301      	moveq	r3, #1
 80008b8:	2300      	movne	r3, #0
 80008ba:	b2db      	uxtb	r3, r3
}
 80008bc:	4618      	mov	r0, r3
 80008be:	46bd      	mov	sp, r7
 80008c0:	bc80      	pop	{r7}
 80008c2:	4770      	bx	lr
 80008c4:	40023800 	.word	0x40023800

080008c8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
 80008d4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLP,
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80008d8:	685a      	ldr	r2, [r3, #4]
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80008dc:	4013      	ands	r3, r2
 80008de:	68f9      	ldr	r1, [r7, #12]
 80008e0:	68ba      	ldr	r2, [r7, #8]
 80008e2:	4311      	orrs	r1, r2
 80008e4:	687a      	ldr	r2, [r7, #4]
 80008e6:	0192      	lsls	r2, r2, #6
 80008e8:	4311      	orrs	r1, r2
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	430a      	orrs	r2, r1
 80008ee:	4904      	ldr	r1, [pc, #16]	; (8000900 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80008f0:	4313      	orrs	r3, r2
 80008f2:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLP);
}
 80008f4:	bf00      	nop
 80008f6:	3714      	adds	r7, #20
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bc80      	pop	{r7}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	ffbc8000 	.word	0xffbc8000

08000908 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000914:	4907      	ldr	r1, [pc, #28]	; (8000934 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4313      	orrs	r3, r2
 800091a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800091c:	4b05      	ldr	r3, [pc, #20]	; (8000934 <LL_APB1_GRP1_EnableClock+0x2c>)
 800091e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4013      	ands	r3, r2
 8000924:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	bc80      	pop	{r7}
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop
 8000934:	40023800 	.word	0x40023800

08000938 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM10
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM11
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000944:	4907      	ldr	r1, [pc, #28]	; (8000964 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4313      	orrs	r3, r2
 800094a:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <LL_APB2_GRP1_EnableClock+0x2c>)
 800094e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	4013      	ands	r3, r2
 8000954:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000956:	68fb      	ldr	r3, [r7, #12]
}
 8000958:	bf00      	nop
 800095a:	3714      	adds	r7, #20
 800095c:	46bd      	mov	sp, r7
 800095e:	bc80      	pop	{r7}
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40023800 	.word	0x40023800

08000968 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <LL_FLASH_SetLatency+0x24>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f023 020f 	bic.w	r2, r3, #15
 8000978:	4904      	ldr	r1, [pc, #16]	; (800098c <LL_FLASH_SetLatency+0x24>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4313      	orrs	r3, r2
 800097e:	600b      	str	r3, [r1, #0]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023c00 	.word	0x40023c00

08000990 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_5
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000994:	4b03      	ldr	r3, [pc, #12]	; (80009a4 <LL_FLASH_GetLatency+0x14>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f003 030f 	and.w	r3, r3, #15
}
 800099c:	4618      	mov	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40023c00 	.word	0x40023c00

080009a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80009ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80009b2:	f7ff ffc1 	bl	8000938 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80009b6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80009ba:	f7ff ffa5 	bl	8000908 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009be:	2003      	movs	r0, #3
 80009c0:	f7ff fe22 	bl	8000608 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80009c4:	f7ff fe44 	bl	8000650 <__NVIC_GetPriorityGrouping>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2200      	movs	r2, #0
 80009cc:	210f      	movs	r1, #15
 80009ce:	4618      	mov	r0, r3
 80009d0:	f7ff fe76 	bl	80006c0 <NVIC_EncodePriority>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4619      	mov	r1, r3
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f7ff fe46 	bl	800066c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e0:	f000 f862 	bl	8000aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e4:	f7ff fc22 	bl	800022c <MX_GPIO_Init>
  MX_TIM3_Init();
 80009e8:	f000 fcfc 	bl	80013e4 <MX_TIM3_Init>
  MX_TIM2_Init();
 80009ec:	f000 fc9b 	bl	8001326 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SysTick_Config(SystemCoreClock/1000);
 80009f0:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <main+0xec>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a28      	ldr	r2, [pc, #160]	; (8000a98 <main+0xf0>)
 80009f6:	fba2 2303 	umull	r2, r3, r2, r3
 80009fa:	099b      	lsrs	r3, r3, #6
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fe91 	bl	8000724 <SysTick_Config>
  TIM7->DIER |= TIM_DIER_UIE;
 8000a02:	4b26      	ldr	r3, [pc, #152]	; (8000a9c <main+0xf4>)
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	4a25      	ldr	r2, [pc, #148]	; (8000a9c <main+0xf4>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	60d3      	str	r3, [r2, #12]
  TIM7->CR1 |= TIM_CR1_CEN;
 8000a0e:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <main+0xf4>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a22      	ldr	r2, [pc, #136]	; (8000a9c <main+0xf4>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6013      	str	r3, [r2, #0]

  TIM3->CCER |= TIM_CCER_CC3E;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <main+0xf8>)
 8000a1c:	6a1b      	ldr	r3, [r3, #32]
 8000a1e:	4a20      	ldr	r2, [pc, #128]	; (8000aa0 <main+0xf8>)
 8000a20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a24:	6213      	str	r3, [r2, #32]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000a26:	4b1e      	ldr	r3, [pc, #120]	; (8000aa0 <main+0xf8>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a1d      	ldr	r2, [pc, #116]	; (8000aa0 <main+0xf8>)
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	6013      	str	r3, [r2, #0]
  TIM3->CCR3 = 200; //Brightness
 8000a32:	4b1b      	ldr	r3, [pc, #108]	; (8000aa0 <main+0xf8>)
 8000a34:	22c8      	movs	r2, #200	; 0xc8
 8000a36:	63da      	str	r2, [r3, #60]	; 0x3c

  //TIM2->DIER |= TIM_DIER_UIE | TIM_DIER_CC1IE;
  TIM2->SR = 0;
 8000a38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  TIM2->CR1 &= ~TIM_CR1_CEN;
 8000a40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a4a:	f023 0301 	bic.w	r3, r3, #1
 8000a4e:	6013      	str	r3, [r2, #0]

  lcd_init();
 8000a50:	f7ff fcc0 	bl	80003d4 <lcd_init>
  GPIOF->BSRR = GPIO_BSRR_BS6; //on led stat 1
 8000a54:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <main+0xfc>)
 8000a56:	2240      	movs	r2, #64	; 0x40
 8000a58:	619a      	str	r2, [r3, #24]
  for (uint32_t i=0; i < 50; i++){
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	e00b      	b.n	8000a78 <main+0xd0>
	  LCD_set_pixel(i,i, WHITE);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	b2d1      	uxtb	r1, r2
 8000a68:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff fdab 	bl	80005c8 <LCD_set_pixel>
  for (uint32_t i=0; i < 50; i++){
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	3301      	adds	r3, #1
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b31      	cmp	r3, #49	; 0x31
 8000a7c:	d9f0      	bls.n	8000a60 <main+0xb8>
  }
  GPIOF->BSRR = GPIO_BSRR_BS7; //on led stat 2
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <main+0xfc>)
 8000a80:	2280      	movs	r2, #128	; 0x80
 8000a82:	619a      	str	r2, [r3, #24]
  LCD_clear(TEST);
 8000a84:	f640 700f 	movw	r0, #3855	; 0xf0f
 8000a88:	f7ff fd32 	bl	80004f0 <LCD_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  spi_handler();
 8000a8c:	f000 f84e 	bl	8000b2c <spi_handler>
 8000a90:	e7fc      	b.n	8000a8c <main+0xe4>
 8000a92:	bf00      	nop
 8000a94:	20000004 	.word	0x20000004
 8000a98:	10624dd3 	.word	0x10624dd3
 8000a9c:	40001400 	.word	0x40001400
 8000aa0:	40000400 	.word	0x40000400
 8000aa4:	40021400 	.word	0x40021400

08000aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000aac:	2003      	movs	r0, #3
 8000aae:	f7ff ff5b 	bl	8000968 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8000ab2:	bf00      	nop
 8000ab4:	f7ff ff6c 	bl	8000990 <LL_FLASH_GetLatency>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b03      	cmp	r3, #3
 8000abc:	d1fa      	bne.n	8000ab4 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000abe:	f7ff fe53 	bl	8000768 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000ac2:	bf00      	nop
 8000ac4:	f7ff fe5e 	bl	8000784 <LL_RCC_HSI_IsReady>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d1fa      	bne.n	8000ac4 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000ace:	2010      	movs	r0, #16
 8000ad0:	f7ff fe6a 	bl	80007a8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_16, 240, LL_RCC_PLLP_DIV_2);
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	22f0      	movs	r2, #240	; 0xf0
 8000ad8:	2110      	movs	r1, #16
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fef4 	bl	80008c8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000ae0:	f7ff fed2 	bl	8000888 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000ae4:	bf00      	nop
 8000ae6:	f7ff fedd 	bl	80008a4 <LL_RCC_PLL_IsReady>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d1fa      	bne.n	8000ae6 <SystemClock_Config+0x3e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f7ff fe8d 	bl	8000810 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000af6:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000afa:	f7ff fe9d 	bl	8000838 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000afe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000b02:	f7ff fead 	bl	8000860 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000b06:	2002      	movs	r0, #2
 8000b08:	f7ff fe62 	bl	80007d0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000b0c:	bf00      	nop
 8000b0e:	f7ff fe73 	bl	80007f8 <LL_RCC_GetSysClkSource>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b08      	cmp	r3, #8
 8000b16:	d1fa      	bne.n	8000b0e <SystemClock_Config+0x66>
  {

  }
  LL_Init1msTick(120000000);
 8000b18:	4803      	ldr	r0, [pc, #12]	; (8000b28 <SystemClock_Config+0x80>)
 8000b1a:	f001 f96d 	bl	8001df8 <LL_Init1msTick>
  LL_SetSystemCoreClock(120000000);
 8000b1e:	4802      	ldr	r0, [pc, #8]	; (8000b28 <SystemClock_Config+0x80>)
 8000b20:	f001 f978 	bl	8001e14 <LL_SetSystemCoreClock>
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	07270e00 	.word	0x07270e00

08000b2c <spi_handler>:
uint16_t queue_buff_check_pos = 0;
uint16_t q_data;
enum PACKAGE_TYPE q_p_type;


void spi_handler(void){
 8000b2c:	b490      	push	{r4, r7}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
	switch(spi_state){
 8000b32:	4b5f      	ldr	r3, [pc, #380]	; (8000cb0 <spi_handler+0x184>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	2b02      	cmp	r3, #2
 8000b38:	f000 80a6 	beq.w	8000c88 <spi_handler+0x15c>
 8000b3c:	2b02      	cmp	r3, #2
 8000b3e:	f300 80b2 	bgt.w	8000ca6 <spi_handler+0x17a>
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <spi_handler+0x22>
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	f000 8082 	beq.w	8000c50 <spi_handler+0x124>
			spi_state = SPI_CHECK;
			spi_sent = 0;
		}
		break;
	}
}
 8000b4c:	e0ab      	b.n	8000ca6 <spi_handler+0x17a>
		if (q_spi[queue_buff_check_pos].not_used){
 8000b4e:	4b59      	ldr	r3, [pc, #356]	; (8000cb4 <spi_handler+0x188>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	4619      	mov	r1, r3
 8000b54:	4a58      	ldr	r2, [pc, #352]	; (8000cb8 <spi_handler+0x18c>)
 8000b56:	460b      	mov	r3, r1
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	440b      	add	r3, r1
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	3308      	adds	r3, #8
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d039      	beq.n	8000bdc <spi_handler+0xb0>
			spi_len = q_spi[queue_buff_check_pos].len;
 8000b68:	4b52      	ldr	r3, [pc, #328]	; (8000cb4 <spi_handler+0x188>)
 8000b6a:	881b      	ldrh	r3, [r3, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4a52      	ldr	r2, [pc, #328]	; (8000cb8 <spi_handler+0x18c>)
 8000b70:	460b      	mov	r3, r1
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	440b      	add	r3, r1
 8000b76:	009b      	lsls	r3, r3, #2
 8000b78:	4413      	add	r3, r2
 8000b7a:	330a      	adds	r3, #10
 8000b7c:	881a      	ldrh	r2, [r3, #0]
 8000b7e:	4b4f      	ldr	r3, [pc, #316]	; (8000cbc <spi_handler+0x190>)
 8000b80:	801a      	strh	r2, [r3, #0]
			for (uint8_t i = 0; i < spi_len; i++){
 8000b82:	2300      	movs	r3, #0
 8000b84:	71fb      	strb	r3, [r7, #7]
 8000b86:	e012      	b.n	8000bae <spi_handler+0x82>
				spi_package[i] = q_spi[queue_buff_check_pos].data[i];
 8000b88:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <spi_handler+0x188>)
 8000b8a:	881b      	ldrh	r3, [r3, #0]
 8000b8c:	461c      	mov	r4, r3
 8000b8e:	79f9      	ldrb	r1, [r7, #7]
 8000b90:	79fa      	ldrb	r2, [r7, #7]
 8000b92:	4849      	ldr	r0, [pc, #292]	; (8000cb8 <spi_handler+0x18c>)
 8000b94:	4623      	mov	r3, r4
 8000b96:	005b      	lsls	r3, r3, #1
 8000b98:	4423      	add	r3, r4
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	440b      	add	r3, r1
 8000b9e:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8000ba2:	4b47      	ldr	r3, [pc, #284]	; (8000cc0 <spi_handler+0x194>)
 8000ba4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			for (uint8_t i = 0; i < spi_len; i++){
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	3301      	adds	r3, #1
 8000bac:	71fb      	strb	r3, [r7, #7]
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b42      	ldr	r3, [pc, #264]	; (8000cbc <spi_handler+0x190>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	d3e5      	bcc.n	8000b88 <spi_handler+0x5c>
			q_spi[queue_buff_check_pos].not_used = 0;
 8000bbc:	4b3d      	ldr	r3, [pc, #244]	; (8000cb4 <spi_handler+0x188>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4a3d      	ldr	r2, [pc, #244]	; (8000cb8 <spi_handler+0x18c>)
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	005b      	lsls	r3, r3, #1
 8000bc8:	440b      	add	r3, r1
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	3308      	adds	r3, #8
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
			spi_state = SPI_START;
 8000bd4:	4b36      	ldr	r3, [pc, #216]	; (8000cb0 <spi_handler+0x184>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
 8000bda:	e00c      	b.n	8000bf6 <spi_handler+0xca>
			queue_buff_check_pos++;
 8000bdc:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <spi_handler+0x188>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	3301      	adds	r3, #1
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	4b33      	ldr	r3, [pc, #204]	; (8000cb4 <spi_handler+0x188>)
 8000be6:	801a      	strh	r2, [r3, #0]
			if (queue_buff_check_pos >= __QUEUE_LEN) queue_buff_check_pos = 0;
 8000be8:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <spi_handler+0x188>)
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	2bc7      	cmp	r3, #199	; 0xc7
 8000bee:	d902      	bls.n	8000bf6 <spi_handler+0xca>
 8000bf0:	4b30      	ldr	r3, [pc, #192]	; (8000cb4 <spi_handler+0x188>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	801a      	strh	r2, [r3, #0]
		if(spi_control_mod_request){
 8000bf6:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <spi_handler+0x198>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d04f      	beq.n	8000ca0 <spi_handler+0x174>
			uint8_t check_queue = 0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	71bb      	strb	r3, [r7, #6]
			for (uint8_t i = 0; i < __QUEUE_LEN; i++){
 8000c04:	2300      	movs	r3, #0
 8000c06:	717b      	strb	r3, [r7, #5]
 8000c08:	e00e      	b.n	8000c28 <spi_handler+0xfc>
				check_queue += q_spi[i].not_used;
 8000c0a:	797a      	ldrb	r2, [r7, #5]
 8000c0c:	492a      	ldr	r1, [pc, #168]	; (8000cb8 <spi_handler+0x18c>)
 8000c0e:	4613      	mov	r3, r2
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	4413      	add	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	440b      	add	r3, r1
 8000c18:	3308      	adds	r3, #8
 8000c1a:	781a      	ldrb	r2, [r3, #0]
 8000c1c:	79bb      	ldrb	r3, [r7, #6]
 8000c1e:	4413      	add	r3, r2
 8000c20:	71bb      	strb	r3, [r7, #6]
			for (uint8_t i = 0; i < __QUEUE_LEN; i++){
 8000c22:	797b      	ldrb	r3, [r7, #5]
 8000c24:	3301      	adds	r3, #1
 8000c26:	717b      	strb	r3, [r7, #5]
 8000c28:	797b      	ldrb	r3, [r7, #5]
 8000c2a:	2bc7      	cmp	r3, #199	; 0xc7
 8000c2c:	d9ed      	bls.n	8000c0a <spi_handler+0xde>
			if (!check_queue){
 8000c2e:	79bb      	ldrb	r3, [r7, #6]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d135      	bne.n	8000ca0 <spi_handler+0x174>
				spi_control_mod_enable = 1;
 8000c34:	4b24      	ldr	r3, [pc, #144]	; (8000cc8 <spi_handler+0x19c>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]
				spi_control_mod_request = 0;
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <spi_handler+0x198>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	701a      	strb	r2, [r3, #0]
				spi_len = 26144;
 8000c40:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <spi_handler+0x190>)
 8000c42:	f246 6220 	movw	r2, #26144	; 0x6620
 8000c46:	801a      	strh	r2, [r3, #0]
				spi_state = SPI_START;
 8000c48:	4b19      	ldr	r3, [pc, #100]	; (8000cb0 <spi_handler+0x184>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	701a      	strb	r2, [r3, #0]
		break;
 8000c4e:	e027      	b.n	8000ca0 <spi_handler+0x174>
		LCD_CS_ON();
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <spi_handler+0x1a0>)
 8000c52:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c56:	619a      	str	r2, [r3, #24]
		TIM2->SR = 0;
 8000c58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
		TIM2->DIER |= TIM_DIER_UIE | TIM_DIER_CC1IE;
 8000c60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6a:	f043 0303 	orr.w	r3, r3, #3
 8000c6e:	60d3      	str	r3, [r2, #12]
		TIM2->CR1 |= TIM_CR1_CEN;
 8000c70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6013      	str	r3, [r2, #0]
		spi_state = SPI_END;
 8000c80:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <spi_handler+0x184>)
 8000c82:	2202      	movs	r2, #2
 8000c84:	701a      	strb	r2, [r3, #0]
		break;
 8000c86:	e00e      	b.n	8000ca6 <spi_handler+0x17a>
		if(spi_sent){
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <spi_handler+0x1a4>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d008      	beq.n	8000ca4 <spi_handler+0x178>
			spi_state = SPI_CHECK;
 8000c92:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <spi_handler+0x184>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	701a      	strb	r2, [r3, #0]
			spi_sent = 0;
 8000c98:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <spi_handler+0x1a4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
		break;
 8000c9e:	e001      	b.n	8000ca4 <spi_handler+0x178>
		break;
 8000ca0:	bf00      	nop
 8000ca2:	e000      	b.n	8000ca6 <spi_handler+0x17a>
		break;
 8000ca4:	bf00      	nop
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc90      	pop	{r4, r7}
 8000cae:	4770      	bx	lr
 8000cb0:	2000cc72 	.word	0x2000cc72
 8000cb4:	2000d5d6 	.word	0x2000d5d6
 8000cb8:	2000cc74 	.word	0x2000cc74
 8000cbc:	2000cc6e 	.word	0x2000cc6e
 8000cc0:	2000cc64 	.word	0x2000cc64
 8000cc4:	2000cc71 	.word	0x2000cc71
 8000cc8:	2000cc70 	.word	0x2000cc70
 8000ccc:	40020c00 	.word	0x40020c00
 8000cd0:	2000cc6c 	.word	0x2000cc6c

08000cd4 <spi_add_to_queue>:
	queue_buff_pos++;

	if (queue_buff_pos == __QUEUE_LEN) queue_buff_pos = 0;
}
*/
void spi_add_to_queue(uint8_t data_1, uint8_t data_2, uint8_t data_3, uint8_t data_4, uint8_t len, uint8_t need_nop){
 8000cd4:	b490      	push	{r4, r7}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4604      	mov	r4, r0
 8000cdc:	4608      	mov	r0, r1
 8000cde:	4611      	mov	r1, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	71fb      	strb	r3, [r7, #7]
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71bb      	strb	r3, [r7, #6]
 8000cea:	460b      	mov	r3, r1
 8000cec:	717b      	strb	r3, [r7, #5]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	713b      	strb	r3, [r7, #4]
	for (uint8_t i = 0; i < len; i++){
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	e074      	b.n	8000de2 <spi_add_to_queue+0x10e>
		switch(i){
 8000cf8:	7bfb      	ldrb	r3, [r7, #15]
 8000cfa:	2b03      	cmp	r3, #3
 8000cfc:	d86e      	bhi.n	8000ddc <spi_add_to_queue+0x108>
 8000cfe:	a201      	add	r2, pc, #4	; (adr r2, 8000d04 <spi_add_to_queue+0x30>)
 8000d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d04:	08000d15 	.word	0x08000d15
 8000d08:	08000d37 	.word	0x08000d37
 8000d0c:	08000d61 	.word	0x08000d61
 8000d10:	08000d8b 	.word	0x08000d8b
		case 0:
			q_spi[queue_buff_pos].data[i] = data_1;
 8000d14:	4b4d      	ldr	r3, [pc, #308]	; (8000e4c <spi_add_to_queue+0x178>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	7bfa      	ldrb	r2, [r7, #15]
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	b29c      	uxth	r4, r3
 8000d22:	494b      	ldr	r1, [pc, #300]	; (8000e50 <spi_add_to_queue+0x17c>)
 8000d24:	4603      	mov	r3, r0
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	4403      	add	r3, r0
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4622      	mov	r2, r4
 8000d30:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			break;
 8000d34:	e052      	b.n	8000ddc <spi_add_to_queue+0x108>
		case 1:
			q_spi[queue_buff_pos].data[i] = (data_2 | 0x0100);
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	b21b      	sxth	r3, r3
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d3e:	b219      	sxth	r1, r3
 8000d40:	4b42      	ldr	r3, [pc, #264]	; (8000e4c <spi_add_to_queue+0x178>)
 8000d42:	881b      	ldrh	r3, [r3, #0]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	7bfa      	ldrb	r2, [r7, #15]
 8000d4a:	b28c      	uxth	r4, r1
 8000d4c:	4940      	ldr	r1, [pc, #256]	; (8000e50 <spi_add_to_queue+0x17c>)
 8000d4e:	4603      	mov	r3, r0
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	4403      	add	r3, r0
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	4413      	add	r3, r2
 8000d58:	4622      	mov	r2, r4
 8000d5a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			break;
 8000d5e:	e03d      	b.n	8000ddc <spi_add_to_queue+0x108>
		case 2:
			q_spi[queue_buff_pos].data[i] = (data_3 | 0x0100);
 8000d60:	797b      	ldrb	r3, [r7, #5]
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d68:	b219      	sxth	r1, r3
 8000d6a:	4b38      	ldr	r3, [pc, #224]	; (8000e4c <spi_add_to_queue+0x178>)
 8000d6c:	881b      	ldrh	r3, [r3, #0]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	4618      	mov	r0, r3
 8000d72:	7bfa      	ldrb	r2, [r7, #15]
 8000d74:	b28c      	uxth	r4, r1
 8000d76:	4936      	ldr	r1, [pc, #216]	; (8000e50 <spi_add_to_queue+0x17c>)
 8000d78:	4603      	mov	r3, r0
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4403      	add	r3, r0
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	4622      	mov	r2, r4
 8000d84:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			break;
 8000d88:	e028      	b.n	8000ddc <spi_add_to_queue+0x108>
		case 3:
			if(need_nop){
 8000d8a:	7f3b      	ldrb	r3, [r7, #28]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d010      	beq.n	8000db2 <spi_add_to_queue+0xde>
				q_spi[queue_buff_pos].data[i] = data_4;
 8000d90:	4b2e      	ldr	r3, [pc, #184]	; (8000e4c <spi_add_to_queue+0x178>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	7bfa      	ldrb	r2, [r7, #15]
 8000d9a:	793b      	ldrb	r3, [r7, #4]
 8000d9c:	b29c      	uxth	r4, r3
 8000d9e:	492c      	ldr	r1, [pc, #176]	; (8000e50 <spi_add_to_queue+0x17c>)
 8000da0:	4603      	mov	r3, r0
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4403      	add	r3, r0
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	4622      	mov	r2, r4
 8000dac:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			}else{
				q_spi[queue_buff_pos].data[i] = (data_4 | 0x0100);
			}
			break;
 8000db0:	e013      	b.n	8000dda <spi_add_to_queue+0x106>
				q_spi[queue_buff_pos].data[i] = (data_4 | 0x0100);
 8000db2:	793b      	ldrb	r3, [r7, #4]
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dba:	b219      	sxth	r1, r3
 8000dbc:	4b23      	ldr	r3, [pc, #140]	; (8000e4c <spi_add_to_queue+0x178>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	7bfa      	ldrb	r2, [r7, #15]
 8000dc6:	b28c      	uxth	r4, r1
 8000dc8:	4921      	ldr	r1, [pc, #132]	; (8000e50 <spi_add_to_queue+0x17c>)
 8000dca:	4603      	mov	r3, r0
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	4403      	add	r3, r0
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4622      	mov	r2, r4
 8000dd6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			break;
 8000dda:	bf00      	nop
	for (uint8_t i = 0; i < len; i++){
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	3301      	adds	r3, #1
 8000de0:	73fb      	strb	r3, [r7, #15]
 8000de2:	7bfa      	ldrb	r2, [r7, #15]
 8000de4:	7e3b      	ldrb	r3, [r7, #24]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	d386      	bcc.n	8000cf8 <spi_add_to_queue+0x24>
		}
	}

	q_spi[queue_buff_pos].len = len;
 8000dea:	4b18      	ldr	r3, [pc, #96]	; (8000e4c <spi_add_to_queue+0x178>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4619      	mov	r1, r3
 8000df2:	7e3b      	ldrb	r3, [r7, #24]
 8000df4:	b298      	uxth	r0, r3
 8000df6:	4a16      	ldr	r2, [pc, #88]	; (8000e50 <spi_add_to_queue+0x17c>)
 8000df8:	460b      	mov	r3, r1
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	440b      	add	r3, r1
 8000dfe:	009b      	lsls	r3, r3, #2
 8000e00:	4413      	add	r3, r2
 8000e02:	330a      	adds	r3, #10
 8000e04:	4602      	mov	r2, r0
 8000e06:	801a      	strh	r2, [r3, #0]
	q_spi[queue_buff_pos].not_used = 1;
 8000e08:	4b10      	ldr	r3, [pc, #64]	; (8000e4c <spi_add_to_queue+0x178>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <spi_add_to_queue+0x17c>)
 8000e12:	460b      	mov	r3, r1
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	440b      	add	r3, r1
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	3308      	adds	r3, #8
 8000e1e:	2201      	movs	r2, #1
 8000e20:	701a      	strb	r2, [r3, #0]

	queue_buff_pos++;
 8000e22:	4b0a      	ldr	r3, [pc, #40]	; (8000e4c <spi_add_to_queue+0x178>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	3301      	adds	r3, #1
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <spi_add_to_queue+0x178>)
 8000e2e:	801a      	strh	r2, [r3, #0]

	if (queue_buff_pos == __QUEUE_LEN) queue_buff_pos = 0;
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <spi_add_to_queue+0x178>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	2bc8      	cmp	r3, #200	; 0xc8
 8000e38:	d102      	bne.n	8000e40 <spi_add_to_queue+0x16c>
 8000e3a:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <spi_add_to_queue+0x178>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	801a      	strh	r2, [r3, #0]
}
 8000e40:	bf00      	nop
 8000e42:	3710      	adds	r7, #16
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bc90      	pop	{r4, r7}
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	2000d5d4 	.word	0x2000d5d4
 8000e50:	2000cc74 	.word	0x2000cc74

08000e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e58:	e7fe      	b.n	8000e58 <NMI_Handler+0x4>

08000e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <MemManage_Handler+0x4>

08000e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <BusFault_Handler+0x4>

08000e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <UsageFault_Handler+0x4>

08000e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
	...

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	ms_ticks++;
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SysTick_Handler+0x1c>)
 8000e9e:	881b      	ldrh	r3, [r3, #0]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <SysTick_Handler+0x1c>)
 8000ea8:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	2000d5d8 	.word	0x2000d5d8

08000eb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	if (TIM2->SR&TIM_SR_UIF) {
 8000ebc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d006      	beq.n	8000ed8 <TIM2_IRQHandler+0x20>
		TIM2->SR = 0;
 8000eca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ece:	2200      	movs	r2, #0
 8000ed0:	611a      	str	r2, [r3, #16]
		SPI_SCK_SET();
 8000ed2:	4b46      	ldr	r3, [pc, #280]	; (8000fec <TIM2_IRQHandler+0x134>)
 8000ed4:	2220      	movs	r2, #32
 8000ed6:	619a      	str	r2, [r3, #24]
	}
	if (TIM2->SR&TIM_SR_CC1IF) {
 8000ed8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000edc:	691b      	ldr	r3, [r3, #16]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d07f      	beq.n	8000fe6 <TIM2_IRQHandler+0x12e>
		TIM2->SR = 0;
 8000ee6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eea:	2200      	movs	r2, #0
 8000eec:	611a      	str	r2, [r3, #16]

		if(!bit_to_send){
 8000eee:	4b40      	ldr	r3, [pc, #256]	; (8000ff0 <TIM2_IRQHandler+0x138>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d135      	bne.n	8000f62 <TIM2_IRQHandler+0xaa>
				bit_to_send = 9;
 8000ef6:	4b3e      	ldr	r3, [pc, #248]	; (8000ff0 <TIM2_IRQHandler+0x138>)
 8000ef8:	2209      	movs	r2, #9
 8000efa:	701a      	strb	r2, [r3, #0]
				current_package++;
 8000efc:	4b3d      	ldr	r3, [pc, #244]	; (8000ff4 <TIM2_IRQHandler+0x13c>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	3301      	adds	r3, #1
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	4b3b      	ldr	r3, [pc, #236]	; (8000ff4 <TIM2_IRQHandler+0x13c>)
 8000f06:	801a      	strh	r2, [r3, #0]
			if(!(current_package < spi_len)){
 8000f08:	4b3a      	ldr	r3, [pc, #232]	; (8000ff4 <TIM2_IRQHandler+0x13c>)
 8000f0a:	881a      	ldrh	r2, [r3, #0]
 8000f0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ff8 <TIM2_IRQHandler+0x140>)
 8000f0e:	881b      	ldrh	r3, [r3, #0]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d325      	bcc.n	8000f62 <TIM2_IRQHandler+0xaa>
				SPI_SCK_RESET();
 8000f16:	4b35      	ldr	r3, [pc, #212]	; (8000fec <TIM2_IRQHandler+0x134>)
 8000f18:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f1c:	619a      	str	r2, [r3, #24]
				TIM2->CR1 &= ~TIM_CR1_CEN;
 8000f1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	6013      	str	r3, [r2, #0]
				TIM2->CNT = 0;
 8000f2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f32:	2200      	movs	r2, #0
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
				TIM2->SR = 0;
 8000f36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
				spi_sent = 1;
 8000f3e:	4b2f      	ldr	r3, [pc, #188]	; (8000ffc <TIM2_IRQHandler+0x144>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
				current_package = 0;
 8000f44:	4b2b      	ldr	r3, [pc, #172]	; (8000ff4 <TIM2_IRQHandler+0x13c>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	801a      	strh	r2, [r3, #0]
				if(spi_control_mod_enable){
 8000f4a:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <TIM2_IRQHandler+0x148>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d002      	beq.n	8000f5a <TIM2_IRQHandler+0xa2>
					spi_control_mod_enable = 0;
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <TIM2_IRQHandler+0x148>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
				}
				LCD_CS_OFF();
 8000f5a:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <TIM2_IRQHandler+0x14c>)
 8000f5c:	2240      	movs	r2, #64	; 0x40
 8000f5e:	619a      	str	r2, [r3, #24]
				return;
 8000f60:	e041      	b.n	8000fe6 <TIM2_IRQHandler+0x12e>
			}
		}

		SPI_SCK_RESET();
 8000f62:	4b22      	ldr	r3, [pc, #136]	; (8000fec <TIM2_IRQHandler+0x134>)
 8000f64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f68:	619a      	str	r2, [r3, #24]

		if(spi_control_mod_enable){
 8000f6a:	4b25      	ldr	r3, [pc, #148]	; (8001000 <TIM2_IRQHandler+0x148>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d019      	beq.n	8000fa8 <TIM2_IRQHandler+0xf0>
			if(control_lcd.Raw[current_package]&(1 << (bit_to_send-1))){
 8000f74:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <TIM2_IRQHandler+0x13c>)
 8000f76:	881b      	ldrh	r3, [r3, #0]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <TIM2_IRQHandler+0x150>)
 8000f7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <TIM2_IRQHandler+0x138>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	fa42 f303 	asr.w	r3, r2, r3
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <TIM2_IRQHandler+0xe6>
				SPI_MOSI_SET();
 8000f96:	4b1d      	ldr	r3, [pc, #116]	; (800100c <TIM2_IRQHandler+0x154>)
 8000f98:	2208      	movs	r2, #8
 8000f9a:	619a      	str	r2, [r3, #24]
 8000f9c:	e01d      	b.n	8000fda <TIM2_IRQHandler+0x122>
			}else{
				SPI_MOSI_RESET();
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <TIM2_IRQHandler+0x154>)
 8000fa0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fa4:	619a      	str	r2, [r3, #24]
 8000fa6:	e018      	b.n	8000fda <TIM2_IRQHandler+0x122>
			}
		} else {
			if(spi_package[current_package]&(1 << (bit_to_send-1))){
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <TIM2_IRQHandler+0x13c>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <TIM2_IRQHandler+0x158>)
 8000fb0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <TIM2_IRQHandler+0x138>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	fa42 f303 	asr.w	r3, r2, r3
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <TIM2_IRQHandler+0x11a>
				SPI_MOSI_SET();
 8000fca:	4b10      	ldr	r3, [pc, #64]	; (800100c <TIM2_IRQHandler+0x154>)
 8000fcc:	2208      	movs	r2, #8
 8000fce:	619a      	str	r2, [r3, #24]
 8000fd0:	e003      	b.n	8000fda <TIM2_IRQHandler+0x122>
			}else{
				SPI_MOSI_RESET();
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <TIM2_IRQHandler+0x154>)
 8000fd4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000fd8:	619a      	str	r2, [r3, #24]
			}
		}

		bit_to_send--;
 8000fda:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <TIM2_IRQHandler+0x138>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <TIM2_IRQHandler+0x138>)
 8000fe4:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	40020000 	.word	0x40020000
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	2000d5da 	.word	0x2000d5da
 8000ff8:	2000cc6e 	.word	0x2000cc6e
 8000ffc:	2000cc6c 	.word	0x2000cc6c
 8001000:	2000cc70 	.word	0x2000cc70
 8001004:	40020c00 	.word	0x40020c00
 8001008:	20000024 	.word	0x20000024
 800100c:	40020800 	.word	0x40020800
 8001010:	2000cc64 	.word	0x2000cc64

08001014 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	bc80      	pop	{r7}
 800101e:	4770      	bx	lr

08001020 <__NVIC_GetPriorityGrouping>:
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001024:	4b04      	ldr	r3, [pc, #16]	; (8001038 <__NVIC_GetPriorityGrouping+0x18>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	f003 0307 	and.w	r3, r3, #7
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_EnableIRQ>:
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	2b00      	cmp	r3, #0
 800104c:	db0b      	blt.n	8001066 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	f003 021f 	and.w	r2, r3, #31
 8001054:	4906      	ldr	r1, [pc, #24]	; (8001070 <__NVIC_EnableIRQ+0x34>)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	095b      	lsrs	r3, r3, #5
 800105c:	2001      	movs	r0, #1
 800105e:	fa00 f202 	lsl.w	r2, r0, r2
 8001062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	bc80      	pop	{r7}
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	; (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	; (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	; 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <LL_AHB1_GRP1_EnableClock>:
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001134:	4b08      	ldr	r3, [pc, #32]	; (8001158 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001136:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001138:	4907      	ldr	r1, [pc, #28]	; (8001158 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4313      	orrs	r3, r2
 800113e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001142:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4013      	ands	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	bf00      	nop
 800114e:	3714      	adds	r7, #20
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40023800 	.word	0x40023800

0800115c <LL_APB1_GRP1_EnableClock>:
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001168:	4907      	ldr	r1, [pc, #28]	; (8001188 <LL_APB1_GRP1_EnableClock+0x2c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4313      	orrs	r3, r2
 800116e:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001172:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4013      	ands	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800

0800118c <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	601a      	str	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr
	...

080011ac <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d01c      	beq.n	80011f6 <LL_TIM_OC_DisableFast+0x4a>
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2b04      	cmp	r3, #4
 80011c0:	d017      	beq.n	80011f2 <LL_TIM_OC_DisableFast+0x46>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2b10      	cmp	r3, #16
 80011c6:	d012      	beq.n	80011ee <LL_TIM_OC_DisableFast+0x42>
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	2b40      	cmp	r3, #64	; 0x40
 80011cc:	d00d      	beq.n	80011ea <LL_TIM_OC_DisableFast+0x3e>
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011d4:	d007      	beq.n	80011e6 <LL_TIM_OC_DisableFast+0x3a>
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011dc:	d101      	bne.n	80011e2 <LL_TIM_OC_DisableFast+0x36>
 80011de:	2305      	movs	r3, #5
 80011e0:	e00a      	b.n	80011f8 <LL_TIM_OC_DisableFast+0x4c>
 80011e2:	2306      	movs	r3, #6
 80011e4:	e008      	b.n	80011f8 <LL_TIM_OC_DisableFast+0x4c>
 80011e6:	2304      	movs	r3, #4
 80011e8:	e006      	b.n	80011f8 <LL_TIM_OC_DisableFast+0x4c>
 80011ea:	2303      	movs	r3, #3
 80011ec:	e004      	b.n	80011f8 <LL_TIM_OC_DisableFast+0x4c>
 80011ee:	2302      	movs	r3, #2
 80011f0:	e002      	b.n	80011f8 <LL_TIM_OC_DisableFast+0x4c>
 80011f2:	2301      	movs	r3, #1
 80011f4:	e000      	b.n	80011f8 <LL_TIM_OC_DisableFast+0x4c>
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3318      	adds	r3, #24
 80011fe:	4619      	mov	r1, r3
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <LL_TIM_OC_DisableFast+0x80>)
 8001204:	5cd3      	ldrb	r3, [r2, r3]
 8001206:	440b      	add	r3, r1
 8001208:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <LL_TIM_OC_DisableFast+0x84>)
 8001212:	5ccb      	ldrb	r3, [r1, r3]
 8001214:	4619      	mov	r1, r3
 8001216:	2304      	movs	r3, #4
 8001218:	408b      	lsls	r3, r1
 800121a:	43db      	mvns	r3, r3
 800121c:	401a      	ands	r2, r3
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	601a      	str	r2, [r3, #0]

}
 8001222:	bf00      	nop
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr
 800122c:	08001ea0 	.word	0x08001ea0
 8001230:	08001ea8 	.word	0x08001ea8

08001234 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH3
  *         @arg @ref LL_TIM_CHANNEL_CH4
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d01c      	beq.n	800127e <LL_TIM_OC_EnablePreload+0x4a>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2b04      	cmp	r3, #4
 8001248:	d017      	beq.n	800127a <LL_TIM_OC_EnablePreload+0x46>
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2b10      	cmp	r3, #16
 800124e:	d012      	beq.n	8001276 <LL_TIM_OC_EnablePreload+0x42>
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	2b40      	cmp	r3, #64	; 0x40
 8001254:	d00d      	beq.n	8001272 <LL_TIM_OC_EnablePreload+0x3e>
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800125c:	d007      	beq.n	800126e <LL_TIM_OC_EnablePreload+0x3a>
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001264:	d101      	bne.n	800126a <LL_TIM_OC_EnablePreload+0x36>
 8001266:	2305      	movs	r3, #5
 8001268:	e00a      	b.n	8001280 <LL_TIM_OC_EnablePreload+0x4c>
 800126a:	2306      	movs	r3, #6
 800126c:	e008      	b.n	8001280 <LL_TIM_OC_EnablePreload+0x4c>
 800126e:	2304      	movs	r3, #4
 8001270:	e006      	b.n	8001280 <LL_TIM_OC_EnablePreload+0x4c>
 8001272:	2303      	movs	r3, #3
 8001274:	e004      	b.n	8001280 <LL_TIM_OC_EnablePreload+0x4c>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <LL_TIM_OC_EnablePreload+0x4c>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <LL_TIM_OC_EnablePreload+0x4c>
 800127e:	2300      	movs	r3, #0
 8001280:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	3318      	adds	r3, #24
 8001286:	4619      	mov	r1, r3
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <LL_TIM_OC_EnablePreload+0x80>)
 800128c:	5cd3      	ldrb	r3, [r2, r3]
 800128e:	440b      	add	r3, r1
 8001290:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	7bfb      	ldrb	r3, [r7, #15]
 8001298:	4907      	ldr	r1, [pc, #28]	; (80012b8 <LL_TIM_OC_EnablePreload+0x84>)
 800129a:	5ccb      	ldrb	r3, [r1, r3]
 800129c:	4619      	mov	r1, r3
 800129e:	2308      	movs	r3, #8
 80012a0:	408b      	lsls	r3, r1
 80012a2:	431a      	orrs	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	601a      	str	r2, [r3, #0]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	08001ea0 	.word	0x08001ea0
 80012b8:	08001ea8 	.word	0x08001ea8

080012bc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80012ce:	f023 0307 	bic.w	r3, r3, #7
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	609a      	str	r2, [r3, #8]
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	bc80      	pop	{r7}
 80012e2:	4770      	bx	lr

080012e4 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	605a      	str	r2, [r3, #4]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	609a      	str	r2, [r3, #8]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bc80      	pop	{r7}
 8001324:	4770      	bx	lr

08001326 <MX_TIM2_Init>:

/* USER CODE END 0 */

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b08e      	sub	sp, #56	; 0x38
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800132c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800133c:	1d3b      	adds	r3, r7, #4
 800133e:	2220      	movs	r2, #32
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f000 fd74 	bl	8001e30 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8001348:	2001      	movs	r0, #1
 800134a:	f7ff ff07 	bl	800115c <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800134e:	f7ff fe67 	bl	8001020 <__NVIC_GetPriorityGrouping>
 8001352:	4603      	mov	r3, r0
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff feb5 	bl	80010c8 <NVIC_EncodePriority>
 800135e:	4603      	mov	r3, r0
 8001360:	4619      	mov	r1, r3
 8001362:	201c      	movs	r0, #28
 8001364:	f7ff fe86 	bl	8001074 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8001368:	201c      	movs	r0, #28
 800136a:	f7ff fe67 	bl	800103c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 3;
 800136e:	2303      	movs	r3, #3
 8001370:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 100;
 8001376:	2364      	movs	r3, #100	; 0x64
 8001378:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800137a:	2300      	movs	r3, #0
 800137c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800137e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001382:	4619      	mov	r1, r3
 8001384:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001388:	f000 fa9c 	bl	80018c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800138c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001390:	f7ff fefc 	bl	800118c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001394:	2100      	movs	r1, #0
 8001396:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800139a:	f7ff ff8f 	bl	80012bc <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_FROZEN;
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 50;
 80013aa:	2332      	movs	r3, #50	; 0x32
 80013ac:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	461a      	mov	r2, r3
 80013b6:	2101      	movs	r1, #1
 80013b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013bc:	f000 fb1c 	bl	80019f8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80013c0:	2101      	movs	r1, #1
 80013c2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013c6:	f7ff fef1 	bl	80011ac <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80013ca:	2100      	movs	r1, #0
 80013cc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013d0:	f7ff ff88 	bl	80012e4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80013d4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013d8:	f7ff ff96 	bl	8001308 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	3738      	adds	r7, #56	; 0x38
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b094      	sub	sp, #80	; 0x50
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80013ea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
 80013f8:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80013fa:	f107 031c 	add.w	r3, r7, #28
 80013fe:	2220      	movs	r2, #32
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f000 fd14 	bl	8001e30 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
 8001416:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8001418:	2002      	movs	r0, #2
 800141a:	f7ff fe9f 	bl	800115c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 119;
 800141e:	2377      	movs	r3, #119	; 0x77
 8001420:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001422:	2300      	movs	r3, #0
 8001424:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 255;
 8001426:	23ff      	movs	r3, #255	; 0xff
 8001428:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800142a:	2300      	movs	r3, #0
 800142c:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800142e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001432:	4619      	mov	r1, r3
 8001434:	4820      	ldr	r0, [pc, #128]	; (80014b8 <MX_TIM3_Init+0xd4>)
 8001436:	f000 fa45 	bl	80018c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800143a:	481f      	ldr	r0, [pc, #124]	; (80014b8 <MX_TIM3_Init+0xd4>)
 800143c:	f7ff fea6 	bl	800118c <LL_TIM_DisableARRPreload>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 8001440:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001444:	481c      	ldr	r0, [pc, #112]	; (80014b8 <MX_TIM3_Init+0xd4>)
 8001446:	f7ff fef5 	bl	8001234 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800144a:	2360      	movs	r3, #96	; 0x60
 800144c:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800145a:	2300      	movs	r3, #0
 800145c:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	461a      	mov	r2, r3
 8001464:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001468:	4813      	ldr	r0, [pc, #76]	; (80014b8 <MX_TIM3_Init+0xd4>)
 800146a:	f000 fac5 	bl	80019f8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 800146e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001472:	4811      	ldr	r0, [pc, #68]	; (80014b8 <MX_TIM3_Init+0xd4>)
 8001474:	f7ff fe9a 	bl	80011ac <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8001478:	2100      	movs	r1, #0
 800147a:	480f      	ldr	r0, [pc, #60]	; (80014b8 <MX_TIM3_Init+0xd4>)
 800147c:	f7ff ff32 	bl	80012e4 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8001480:	480d      	ldr	r0, [pc, #52]	; (80014b8 <MX_TIM3_Init+0xd4>)
 8001482:	f7ff ff41 	bl	8001308 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001486:	2002      	movs	r0, #2
 8001488:	f7ff fe50 	bl	800112c <LL_AHB1_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800148c:	2301      	movs	r3, #1
 800148e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001490:	2302      	movs	r3, #2
 8001492:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	4804      	ldr	r0, [pc, #16]	; (80014bc <MX_TIM3_Init+0xd8>)
 80014aa:	f000 f931 	bl	8001710 <LL_GPIO_Init>

}
 80014ae:	bf00      	nop
 80014b0:	3750      	adds	r7, #80	; 0x50
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40000400 	.word	0x40000400
 80014bc:	40020400 	.word	0x40020400

080014c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80014c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 80014c4:	f7ff fda6 	bl	8001014 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014c8:	480c      	ldr	r0, [pc, #48]	; (80014fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014ca:	490d      	ldr	r1, [pc, #52]	; (8001500 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014cc:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d0:	e002      	b.n	80014d8 <LoopCopyDataInit>

080014d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014d6:	3304      	adds	r3, #4

080014d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014dc:	d3f9      	bcc.n	80014d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014de:	4a0a      	ldr	r2, [pc, #40]	; (8001508 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014e0:	4c0a      	ldr	r4, [pc, #40]	; (800150c <LoopFillZerobss+0x22>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014e4:	e001      	b.n	80014ea <LoopFillZerobss>

080014e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014e8:	3204      	adds	r2, #4

080014ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014ec:	d3fb      	bcc.n	80014e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014ee:	f000 fca7 	bl	8001e40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014f2:	f7ff fa59 	bl	80009a8 <main>
  bx  lr
 80014f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001500:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8001504:	08001eb8 	.word	0x08001eb8
  ldr r2, =_sbss
 8001508:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800150c:	2000d5dc 	.word	0x2000d5dc

08001510 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001510:	e7fe      	b.n	8001510 <ADC_IRQHandler>

08001512 <LL_GPIO_SetPinMode>:
         {
 8001512:	b480      	push	{r7}
 8001514:	b089      	sub	sp, #36	; 0x24
 8001516:	af00      	add	r7, sp, #0
 8001518:	60f8      	str	r0, [r7, #12]
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fa93 f3a3 	rbit	r3, r3
 800152c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	fab3 f383 	clz	r3, r3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	2103      	movs	r1, #3
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43db      	mvns	r3, r3
 8001540:	401a      	ands	r2, r3
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa93 f3a3 	rbit	r3, r3
 800154c:	61bb      	str	r3, [r7, #24]
  return result;
 800154e:	69bb      	ldr	r3, [r7, #24]
 8001550:	fab3 f383 	clz	r3, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	431a      	orrs	r2, r3
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	601a      	str	r2, [r3, #0]
}
 8001564:	bf00      	nop
 8001566:	3724      	adds	r7, #36	; 0x24
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr

0800156e <LL_GPIO_SetPinOutputType>:
{
 800156e:	b480      	push	{r7}
 8001570:	b085      	sub	sp, #20
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	43db      	mvns	r3, r3
 8001582:	401a      	ands	r2, r3
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	fb01 f303 	mul.w	r3, r1, r3
 800158c:	431a      	orrs	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	605a      	str	r2, [r3, #4]
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <LL_GPIO_SetPinSpeed>:
{
 800159c:	b480      	push	{r7}
 800159e:	b089      	sub	sp, #36	; 0x24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	60f8      	str	r0, [r7, #12]
 80015a4:	60b9      	str	r1, [r7, #8]
 80015a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	fa93 f3a3 	rbit	r3, r3
 80015b6:	613b      	str	r3, [r7, #16]
  return result;
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	fab3 f383 	clz	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	2103      	movs	r1, #3
 80015c4:	fa01 f303 	lsl.w	r3, r1, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	401a      	ands	r2, r3
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	fa93 f3a3 	rbit	r3, r3
 80015d6:	61bb      	str	r3, [r7, #24]
  return result;
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fab3 f383 	clz	r3, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	431a      	orrs	r2, r3
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	609a      	str	r2, [r3, #8]
}
 80015ee:	bf00      	nop
 80015f0:	3724      	adds	r7, #36	; 0x24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bc80      	pop	{r7}
 80015f6:	4770      	bx	lr

080015f8 <LL_GPIO_SetPinPull>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b089      	sub	sp, #36	; 0x24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa93 f3a3 	rbit	r3, r3
 8001612:	613b      	str	r3, [r7, #16]
  return result;
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	fab3 f383 	clz	r3, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	2103      	movs	r1, #3
 8001620:	fa01 f303 	lsl.w	r3, r1, r3
 8001624:	43db      	mvns	r3, r3
 8001626:	401a      	ands	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	fa93 f3a3 	rbit	r3, r3
 8001632:	61bb      	str	r3, [r7, #24]
  return result;
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	b2db      	uxtb	r3, r3
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	431a      	orrs	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	60da      	str	r2, [r3, #12]
}
 800164a:	bf00      	nop
 800164c:	3724      	adds	r7, #36	; 0x24
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <LL_GPIO_SetAFPin_0_7>:
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	6a1a      	ldr	r2, [r3, #32]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	613b      	str	r3, [r7, #16]
  return result;
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	009b      	lsls	r3, r3, #2
 800167a:	210f      	movs	r1, #15
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	401a      	ands	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	61bb      	str	r3, [r7, #24]
  return result;
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	431a      	orrs	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	621a      	str	r2, [r3, #32]
}
 80016a6:	bf00      	nop
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <LL_GPIO_SetAFPin_8_15>:
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	0a1b      	lsrs	r3, r3, #8
 80016c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	fa93 f3a3 	rbit	r3, r3
 80016cc:	613b      	str	r3, [r7, #16]
  return result;
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	210f      	movs	r1, #15
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	401a      	ands	r2, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	0a1b      	lsrs	r3, r3, #8
 80016e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	61bb      	str	r3, [r7, #24]
  return result;
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	fab3 f383 	clz	r3, r3
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	431a      	orrs	r2, r3
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001706:	bf00      	nop
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	bc80      	pop	{r7}
 800170e:	4770      	bx	lr

08001710 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b088      	sub	sp, #32
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	613b      	str	r3, [r7, #16]
  return result;
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	fab3 f383 	clz	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001732:	e051      	b.n	80017d8 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2101      	movs	r1, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa01 f303 	lsl.w	r3, r1, r3
 8001740:	4013      	ands	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d043      	beq.n	80017d2 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d003      	beq.n	800175a <LL_GPIO_Init+0x4a>
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d10e      	bne.n	8001778 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	461a      	mov	r2, r3
 8001760:	69b9      	ldr	r1, [r7, #24]
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f7ff ff1a 	bl	800159c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	6819      	ldr	r1, [r3, #0]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	461a      	mov	r2, r3
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fefb 	bl	800156e <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	461a      	mov	r2, r3
 800177e:	69b9      	ldr	r1, [r7, #24]
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff39 	bl	80015f8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b02      	cmp	r3, #2
 800178c:	d11a      	bne.n	80017c4 <LL_GPIO_Init+0xb4>
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	fa93 f3a3 	rbit	r3, r3
 8001798:	60bb      	str	r3, [r7, #8]
  return result;
 800179a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b07      	cmp	r3, #7
 80017a4:	d807      	bhi.n	80017b6 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	461a      	mov	r2, r3
 80017ac:	69b9      	ldr	r1, [r7, #24]
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f7ff ff50 	bl	8001654 <LL_GPIO_SetAFPin_0_7>
 80017b4:	e006      	b.n	80017c4 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	461a      	mov	r2, r3
 80017bc:	69b9      	ldr	r1, [r7, #24]
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ff76 	bl	80016b0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	461a      	mov	r2, r3
 80017ca:	69b9      	ldr	r1, [r7, #24]
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fea0 	bl	8001512 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3301      	adds	r3, #1
 80017d6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	fa22 f303 	lsr.w	r3, r2, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d1a6      	bne.n	8001734 <LL_GPIO_Init+0x24>
  }
  return (SUCCESS);
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <LL_TIM_SetPrescaler>:
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <LL_TIM_SetAutoReload>:
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800181a:	bf00      	nop
 800181c:	370c      	adds	r7, #12
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <LL_TIM_SetRepetitionCounter>:
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <LL_TIM_OC_SetCompareCH1>:
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr

08001858 <LL_TIM_OC_SetCompareCH2>:
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <LL_TIM_OC_SetCompareCH3>:
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	683a      	ldr	r2, [r7, #0]
 8001880:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <LL_TIM_OC_SetCompareCH4>:
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	f043 0201 	orr.w	r2, r3, #1
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	615a      	str	r2, [r3, #20]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a3d      	ldr	r2, [pc, #244]	; (80019cc <LL_TIM_Init+0x108>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d013      	beq.n	8001904 <LL_TIM_Init+0x40>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018e2:	d00f      	beq.n	8001904 <LL_TIM_Init+0x40>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a3a      	ldr	r2, [pc, #232]	; (80019d0 <LL_TIM_Init+0x10c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d00b      	beq.n	8001904 <LL_TIM_Init+0x40>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a39      	ldr	r2, [pc, #228]	; (80019d4 <LL_TIM_Init+0x110>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d007      	beq.n	8001904 <LL_TIM_Init+0x40>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a38      	ldr	r2, [pc, #224]	; (80019d8 <LL_TIM_Init+0x114>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d003      	beq.n	8001904 <LL_TIM_Init+0x40>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a37      	ldr	r2, [pc, #220]	; (80019dc <LL_TIM_Init+0x118>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d106      	bne.n	8001912 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	4313      	orrs	r3, r2
 8001910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a2d      	ldr	r2, [pc, #180]	; (80019cc <LL_TIM_Init+0x108>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d02b      	beq.n	8001972 <LL_TIM_Init+0xae>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001920:	d027      	beq.n	8001972 <LL_TIM_Init+0xae>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a2a      	ldr	r2, [pc, #168]	; (80019d0 <LL_TIM_Init+0x10c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d023      	beq.n	8001972 <LL_TIM_Init+0xae>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a29      	ldr	r2, [pc, #164]	; (80019d4 <LL_TIM_Init+0x110>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d01f      	beq.n	8001972 <LL_TIM_Init+0xae>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a28      	ldr	r2, [pc, #160]	; (80019d8 <LL_TIM_Init+0x114>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d01b      	beq.n	8001972 <LL_TIM_Init+0xae>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a27      	ldr	r2, [pc, #156]	; (80019dc <LL_TIM_Init+0x118>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d017      	beq.n	8001972 <LL_TIM_Init+0xae>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a26      	ldr	r2, [pc, #152]	; (80019e0 <LL_TIM_Init+0x11c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d013      	beq.n	8001972 <LL_TIM_Init+0xae>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a25      	ldr	r2, [pc, #148]	; (80019e4 <LL_TIM_Init+0x120>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d00f      	beq.n	8001972 <LL_TIM_Init+0xae>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a24      	ldr	r2, [pc, #144]	; (80019e8 <LL_TIM_Init+0x124>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00b      	beq.n	8001972 <LL_TIM_Init+0xae>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a23      	ldr	r2, [pc, #140]	; (80019ec <LL_TIM_Init+0x128>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <LL_TIM_Init+0xae>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a22      	ldr	r2, [pc, #136]	; (80019f0 <LL_TIM_Init+0x12c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d003      	beq.n	8001972 <LL_TIM_Init+0xae>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <LL_TIM_Init+0x130>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d106      	bne.n	8001980 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	4619      	mov	r1, r3
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ff3c 	bl	800180a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	881b      	ldrh	r3, [r3, #0]
 8001996:	4619      	mov	r1, r3
 8001998:	6878      	ldr	r0, [r7, #4]
 800199a:	f7ff ff29 	bl	80017f0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <LL_TIM_Init+0x108>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d003      	beq.n	80019ae <LL_TIM_Init+0xea>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a0c      	ldr	r2, [pc, #48]	; (80019dc <LL_TIM_Init+0x118>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d105      	bne.n	80019ba <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	4619      	mov	r1, r3
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff35 	bl	8001824 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ff73 	bl	80018a6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40010000 	.word	0x40010000
 80019d0:	40000400 	.word	0x40000400
 80019d4:	40000800 	.word	0x40000800
 80019d8:	40000c00 	.word	0x40000c00
 80019dc:	40010400 	.word	0x40010400
 80019e0:	40014000 	.word	0x40014000
 80019e4:	40014400 	.word	0x40014400
 80019e8:	40014800 	.word	0x40014800
 80019ec:	40001800 	.word	0x40001800
 80019f0:	40001c00 	.word	0x40001c00
 80019f4:	40002000 	.word	0x40002000

080019f8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a0e:	d027      	beq.n	8001a60 <LL_TIM_OC_Init+0x68>
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a16:	d82a      	bhi.n	8001a6e <LL_TIM_OC_Init+0x76>
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a1e:	d018      	beq.n	8001a52 <LL_TIM_OC_Init+0x5a>
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a26:	d822      	bhi.n	8001a6e <LL_TIM_OC_Init+0x76>
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d003      	beq.n	8001a36 <LL_TIM_OC_Init+0x3e>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	2b10      	cmp	r3, #16
 8001a32:	d007      	beq.n	8001a44 <LL_TIM_OC_Init+0x4c>
      break;
    case LL_TIM_CHANNEL_CH4:
      result = OC4Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8001a34:	e01b      	b.n	8001a6e <LL_TIM_OC_Init+0x76>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 f81f 	bl	8001a7c <OC1Config>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	75fb      	strb	r3, [r7, #23]
      break;
 8001a42:	e015      	b.n	8001a70 <LL_TIM_OC_Init+0x78>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001a44:	6879      	ldr	r1, [r7, #4]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f884 	bl	8001b54 <OC2Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8001a50:	e00e      	b.n	8001a70 <LL_TIM_OC_Init+0x78>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001a52:	6879      	ldr	r1, [r7, #4]
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f8ed 	bl	8001c34 <OC3Config>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	75fb      	strb	r3, [r7, #23]
      break;
 8001a5e:	e007      	b.n	8001a70 <LL_TIM_OC_Init+0x78>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f956 	bl	8001d14 <OC4Config>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8001a6c:	e000      	b.n	8001a70 <LL_TIM_OC_Init+0x78>
      break;
 8001a6e:	bf00      	nop
  }

  return result;
 8001a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3718      	adds	r7, #24
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	f023 0201 	bic.w	r2, r3, #1
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f023 0303 	bic.w	r3, r3, #3
 8001aaa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f023 0202 	bic.w	r2, r3, #2
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f023 0201 	bic.w	r2, r3, #1
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <OC1Config+0xd0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d003      	beq.n	8001ae6 <OC1Config+0x6a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a1b      	ldr	r2, [pc, #108]	; (8001b50 <OC1Config+0xd4>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d11e      	bne.n	8001b24 <OC1Config+0xa8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f023 0208 	bic.w	r2, r3, #8
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	695b      	ldr	r3, [r3, #20]
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	4313      	orrs	r3, r2
 8001af4:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	f023 0204 	bic.w	r2, r3, #4
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4313      	orrs	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	4619      	mov	r1, r3
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff fe81 	bl	800183e <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40010000 	.word	0x40010000
 8001b50:	40010400 	.word	0x40010400

08001b54 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
 8001b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	f023 0210 	bic.w	r2, r3, #16
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f023 0220 	bic.w	r2, r3, #32
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	011b      	lsls	r3, r3, #4
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f023 0210 	bic.w	r2, r3, #16
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a1d      	ldr	r2, [pc, #116]	; (8001c2c <OC2Config+0xd8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d003      	beq.n	8001bc4 <OC2Config+0x70>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a1c      	ldr	r2, [pc, #112]	; (8001c30 <OC2Config+0xdc>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d11f      	bne.n	8001c04 <OC2Config+0xb0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	019b      	lsls	r3, r3, #6
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	019b      	lsls	r3, r3, #6
 8001be0:	4313      	orrs	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	69db      	ldr	r3, [r3, #28]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68fa      	ldr	r2, [r7, #12]
 8001c0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4619      	mov	r1, r3
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff fe1e 	bl	8001858 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	697a      	ldr	r2, [r7, #20]
 8001c20:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3718      	adds	r7, #24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	40010400 	.word	0x40010400

08001c34 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
 8001c4e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f023 0303 	bic.w	r3, r3, #3
 8001c62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <OC3Config+0xd8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <OC3Config+0x6e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <OC3Config+0xdc>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d11f      	bne.n	8001ce2 <OC3Config+0xae>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	029b      	lsls	r3, r3, #10
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	029b      	lsls	r3, r3, #10
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	015b      	lsls	r3, r3, #5
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68fa      	ldr	r2, [r7, #12]
 8001cec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff fdbc 	bl	8001872 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3718      	adds	r7, #24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40010000 	.word	0x40010000
 8001d10:	40010400 	.word	0x40010400

08001d14 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
 8001d22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	021b      	lsls	r3, r3, #8
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	031b      	lsls	r3, r3, #12
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	031b      	lsls	r3, r3, #12
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <OC4Config+0xa8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d003      	beq.n	8001d84 <OC4Config+0x70>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <OC4Config+0xac>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d107      	bne.n	8001d94 <OC4Config+0x80>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	019b      	lsls	r3, r3, #6
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4619      	mov	r1, r3
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fd70 	bl	800188c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40010400 	.word	0x40010400

08001dc4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <LL_InitTick+0x30>)
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <LL_InitTick+0x30>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001de2:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <LL_InitTick+0x30>)
 8001de4:	2205      	movs	r2, #5
 8001de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001de8:	bf00      	nop
 8001dea:	370c      	adds	r7, #12
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000e010 	.word	0xe000e010

08001df8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001e00:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff ffdd 	bl	8001dc4 <LL_InitTick>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
	...

08001e14 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001e1c:	4a03      	ldr	r2, [pc, #12]	; (8001e2c <LL_SetSystemCoreClock+0x18>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6013      	str	r3, [r2, #0]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr
 8001e2c:	20000004 	.word	0x20000004

08001e30 <memset>:
 8001e30:	4603      	mov	r3, r0
 8001e32:	4402      	add	r2, r0
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d100      	bne.n	8001e3a <memset+0xa>
 8001e38:	4770      	bx	lr
 8001e3a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e3e:	e7f9      	b.n	8001e34 <memset+0x4>

08001e40 <__libc_init_array>:
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	2600      	movs	r6, #0
 8001e44:	4d0c      	ldr	r5, [pc, #48]	; (8001e78 <__libc_init_array+0x38>)
 8001e46:	4c0d      	ldr	r4, [pc, #52]	; (8001e7c <__libc_init_array+0x3c>)
 8001e48:	1b64      	subs	r4, r4, r5
 8001e4a:	10a4      	asrs	r4, r4, #2
 8001e4c:	42a6      	cmp	r6, r4
 8001e4e:	d109      	bne.n	8001e64 <__libc_init_array+0x24>
 8001e50:	f000 f81a 	bl	8001e88 <_init>
 8001e54:	2600      	movs	r6, #0
 8001e56:	4d0a      	ldr	r5, [pc, #40]	; (8001e80 <__libc_init_array+0x40>)
 8001e58:	4c0a      	ldr	r4, [pc, #40]	; (8001e84 <__libc_init_array+0x44>)
 8001e5a:	1b64      	subs	r4, r4, r5
 8001e5c:	10a4      	asrs	r4, r4, #2
 8001e5e:	42a6      	cmp	r6, r4
 8001e60:	d105      	bne.n	8001e6e <__libc_init_array+0x2e>
 8001e62:	bd70      	pop	{r4, r5, r6, pc}
 8001e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e68:	4798      	blx	r3
 8001e6a:	3601      	adds	r6, #1
 8001e6c:	e7ee      	b.n	8001e4c <__libc_init_array+0xc>
 8001e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e72:	4798      	blx	r3
 8001e74:	3601      	adds	r6, #1
 8001e76:	e7f2      	b.n	8001e5e <__libc_init_array+0x1e>
 8001e78:	08001eb0 	.word	0x08001eb0
 8001e7c:	08001eb0 	.word	0x08001eb0
 8001e80:	08001eb0 	.word	0x08001eb0
 8001e84:	08001eb4 	.word	0x08001eb4

08001e88 <_init>:
 8001e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e8a:	bf00      	nop
 8001e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e8e:	bc08      	pop	{r3}
 8001e90:	469e      	mov	lr, r3
 8001e92:	4770      	bx	lr

08001e94 <_fini>:
 8001e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e96:	bf00      	nop
 8001e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e9a:	bc08      	pop	{r3}
 8001e9c:	469e      	mov	lr, r3
 8001e9e:	4770      	bx	lr
